# FrinX Object Exporter
# by eXerigumo Clanjor
# Copyright 2010-2012, licensed under GPLv2.

###### CONFIG ######
OUTPUT_FILE = "/tmp/test.fxo"

###### DON'T MODIFY CODES BELOW UNLESS YOU KNOW WHAT YOU'RE DOING! ######

import bpy;
from struct import *

def fx_export(file):
	def export_mesh(m):
		# export vertices
		vs = []
		# vertex co
		for v in m.vertices:
			vs.append([v.co, None]);
		# uv
		for uid in range(0, len(m.uv_textures[0].data)-1):
			if vs[m.faces[uid].vertices[0]][1] == None:
				vs[m.faces[uid].vertices[0]][1] = m.uv_textures[0].data[uid].uv1
			if vs[m.faces[uid].vertices[1]][1] == None:
				vs[m.faces[uid].vertices[1]][1] = m.uv_textures[0].data[uid].uv2
			if vs[m.faces[uid].vertices[2]][1] == None:
				vs[m.faces[uid].vertices[2]][1] = m.uv_textures[0].data[uid].uv3
		# write out
		file.write(pack("H", len(m.vertices)))
		for v in vs:
			file.write(pack("fffff", v[0][0], v[0][1], v[0][2], v[1][0], v[1][1]))

		# export faces
		file.write(pack("H", len(m.faces)))
		for f in m.faces:
			if len(f.vertices) != 3:
				raise ValueError("Must only contain triangular faces!") 
			# face triangle vertices id
			file.write(pack("HHH", f.vertices[0], f.vertices[1], f.vertices[2]))

	file = open(file, "wb")
	file.write(pack("B", len(bpy.data.meshes)))
	for mesh in bpy.data.meshes:
		export_mesh(mesh)
	file.close()

fx_export(OUTPUT_FILE);